type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | ABS
  | TILDA
  | NOT
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | LP
  | RP
  | IF
  | THEN
  | ELSE
  | FI
  | COMMA
  | PROJ
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
# 33 "a3.ml"
let yytransl_const = [|
  260 (* ABS *);
  261 (* TILDA *);
  262 (* NOT *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* REM *);
  268 (* CONJ *);
  269 (* DISJ *);
  270 (* EQ *);
  271 (* GT *);
  272 (* LT *);
  273 (* LP *);
  274 (* RP *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* FI *);
  279 (* COMMA *);
  280 (* PROJ *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\005\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\007\000\
\007\000\008\000\008\000\009\000\009\000\010\000\010\000\011\000\
\011\000\012\000\012\000\013\000\013\000\014\000\014\000\015\000\
\015\000\016\000\016\000\017\000\017\000\018\000\018\000\018\000\
\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\003\000\001\000\002\000\001\000\003\000\
\003\000\004\000\003\000\004\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\002\000\
\001\000\002\000\001\000\007\000\001\000\007\000\001\000\003\000\
\001\000\003\000\003\000\003\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\039\000\040\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\025\000\027\000\
\029\000\031\000\033\000\037\000\024\000\026\000\006\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\032\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\030\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\033\000\
\027\000\028\000"

let yysindex = "\020\000\
\005\255\000\000\000\000\000\000\000\000\076\255\014\255\005\255\
\005\255\005\255\006\255\000\000\005\000\027\255\000\000\082\255\
\017\255\047\255\045\255\049\255\056\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\255\
\041\255\007\255\067\255\005\255\000\000\005\255\076\255\043\255\
\070\255\076\255\076\255\076\255\076\255\076\255\000\000\005\255\
\000\000\005\255\053\255\027\255\000\000\017\255\076\255\017\255\
\076\255\017\255\047\255\045\255\049\255\056\255\000\000\013\255\
\000\000\040\255\069\255\017\255\017\255\005\255\064\255\042\255\
\048\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\208\000\000\000\202\000\
\130\000\102\000\069\000\035\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\214\000\000\000\142\000\000\000\154\000\
\000\000\166\000\118\000\086\000\052\000\018\000\000\000\065\255\
\000\000\000\000\000\000\178\000\190\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\249\255\049\000\252\255\000\000\229\255\046\000\047\000\
\048\000\054\000\250\255\084\000\000\000\000\000\028\000\055\000\
\000\000\000\000"

let yytablesize = 493
let yytable = "\029\000\
\021\000\032\000\034\000\031\000\037\000\003\000\004\000\005\000\
\006\000\007\000\008\000\054\000\056\000\058\000\003\000\004\000\
\005\000\020\000\007\000\036\000\001\000\009\000\035\000\010\000\
\042\000\036\000\050\000\068\000\011\000\069\000\009\000\036\000\
\010\000\053\000\019\000\048\000\047\000\011\000\038\000\063\000\
\064\000\048\000\066\000\003\000\004\000\005\000\006\000\007\000\
\003\000\004\000\005\000\018\000\036\000\043\000\036\000\044\000\
\055\000\045\000\049\000\009\000\070\000\010\000\072\000\074\000\
\009\000\046\000\011\000\051\000\017\000\071\000\003\000\004\000\
\005\000\006\000\007\000\067\000\003\000\004\000\005\000\006\000\
\007\000\073\000\034\000\057\000\052\000\016\000\009\000\059\000\
\010\000\060\000\030\000\061\000\009\000\011\000\010\000\039\000\
\040\000\041\000\062\000\011\000\075\000\015\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\021\000\021\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\036\000\021\000\000\000\021\000\021\000\021\000\021\000\
\020\000\020\000\020\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\000\000\020\000\000\000\020\000\020\000\020\000\
\020\000\019\000\019\000\000\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\000\000\019\000\019\000\
\019\000\019\000\018\000\018\000\000\000\000\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\018\000\000\000\018\000\
\018\000\018\000\018\000\017\000\017\000\000\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\000\000\
\017\000\017\000\017\000\017\000\016\000\016\000\000\000\000\000\
\000\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\
\000\000\016\000\016\000\016\000\016\000\015\000\000\000\000\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\000\000\015\000\015\000\015\000\015\000\014\000\000\000\000\000\
\000\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\000\000\014\000\014\000\014\000\014\000\013\000\013\000\013\000\
\013\000\013\000\000\000\013\000\000\000\013\000\013\000\013\000\
\013\000\008\000\008\000\008\000\008\000\008\000\000\000\008\000\
\000\000\008\000\008\000\008\000\008\000\011\000\011\000\011\000\
\011\000\011\000\000\000\011\000\000\000\011\000\011\000\011\000\
\011\000\009\000\009\000\009\000\009\000\009\000\000\000\009\000\
\000\000\009\000\009\000\009\000\009\000\012\000\012\000\012\000\
\012\000\012\000\000\000\012\000\000\000\012\000\012\000\012\000\
\012\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\000\000\010\000\010\000\010\000\010\000\007\000\007\000\000\000\
\000\000\000\000\000\000\007\000\003\000\007\000\007\000\007\000\
\007\000\003\000\002\000\003\000\003\000\003\000\003\000\002\000\
\000\000\002\000\002\000\002\000\002\000"

let yycheck = "\006\000\
\000\000\009\000\010\000\008\000\000\000\001\001\002\001\003\001\
\004\001\005\001\006\001\039\000\040\000\041\000\001\001\002\001\
\003\001\000\000\005\001\013\001\001\000\017\001\017\001\019\001\
\008\001\013\001\020\001\055\000\024\001\057\000\017\001\013\001\
\019\001\038\000\000\000\023\001\018\001\024\001\012\001\046\000\
\048\000\023\001\050\000\001\001\002\001\003\001\004\001\005\001\
\001\001\002\001\003\001\000\000\013\001\007\001\013\001\011\001\
\014\001\009\001\018\001\017\001\021\001\019\001\070\000\022\001\
\017\001\010\001\024\001\001\001\000\000\001\001\001\001\002\001\
\003\001\004\001\005\001\023\001\001\001\002\001\003\001\004\001\
\005\001\018\001\018\001\014\001\036\000\000\000\017\001\042\000\
\019\001\043\000\007\000\044\000\017\001\024\001\019\001\014\001\
\015\001\016\001\045\000\024\001\073\000\000\000\048\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\013\001\018\001\255\255\020\001\021\001\022\001\023\001\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\007\001\008\001\255\255\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\018\001\255\255\020\001\
\021\001\022\001\023\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\255\255\018\001\255\255\
\020\001\021\001\022\001\023\001\007\001\008\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\008\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\008\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\012\001\013\001\014\001\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\023\001\012\001\013\001\014\001\015\001\016\001\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\012\001\013\001\255\255\
\255\255\255\255\255\255\018\001\013\001\020\001\021\001\022\001\
\023\001\018\001\013\001\020\001\021\001\022\001\023\001\018\001\
\255\255\020\001\021\001\022\001\023\001"

let yynames_const = "\
  ABS\000\
  TILDA\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  LP\000\
  RP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  COMMA\000\
  PROJ\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'or_expression) in
    Obj.repr(
# 26 "a3.mly"
                      ( _1 )
# 294 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 29 "a3.mly"
                                                         (Disjunction(_1,_3))
# 302 "a3.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 30 "a3.mly"
                                                          (_1)
# 309 "a3.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 33 "a3.mly"
                                                       (Conjunction(_1,_3))
# 317 "a3.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 34 "a3.mly"
                                                       (_1)
# 324 "a3.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 37 "a3.mly"
                     (Not(_2))
# 331 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expression) in
    Obj.repr(
# 38 "a3.mly"
                       (_1)
# 338 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 41 "a3.mly"
                                       ( Equals(_1,_3))
# 346 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 42 "a3.mly"
                                         ( LessT(_1,_3))
# 354 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 43 "a3.mly"
                                            (LessTE(_1,_4))
# 362 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compare_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 44 "a3.mly"
                                         ( GreaterT(_1,_3))
# 370 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'compare_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 45 "a3.mly"
                                            (GreaterTE(_1,_4))
# 378 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 46 "a3.mly"
                   (_1)
# 385 "a3.ml"
               : 'compare_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sub_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_expression) in
    Obj.repr(
# 49 "a3.mly"
                                      ( Sub(_1,_3))
# 393 "a3.ml"
               : 'sub_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_expression) in
    Obj.repr(
# 50 "a3.mly"
                   (_1)
# 400 "a3.ml"
               : 'sub_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 53 "a3.mly"
                                     (Add(_1,_3))
# 408 "a3.ml"
               : 'add_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 54 "a3.mly"
                   (_1)
# 415 "a3.ml"
               : 'add_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 57 "a3.mly"
                                     (Rem(_1,_3))
# 423 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 58 "a3.mly"
                    (_1)
# 430 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 61 "a3.mly"
                                       (Mult(_1,_3))
# 438 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 62 "a3.mly"
                   (_1)
# 445 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 65 "a3.mly"
                                    (Div(_1,_3))
# 453 "a3.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 66 "a3.mly"
                   (_1)
# 460 "a3.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abs_expression) in
    Obj.repr(
# 70 "a3.mly"
                    (Abs(_2))
# 467 "a3.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negative_expression) in
    Obj.repr(
# 71 "a3.mly"
                       (_1)
# 474 "a3.ml"
               : 'abs_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'negative_expression) in
    Obj.repr(
# 75 "a3.mly"
                            (Negative(_2))
# 481 "a3.ml"
               : 'negative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 76 "a3.mly"
                    (_1)
# 488 "a3.ml"
               : 'negative_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'or_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'or_expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'or_expression) in
    Obj.repr(
# 79 "a3.mly"
                                                            (IfThenElse(_2,_4,_6))
# 497 "a3.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proj_expression) in
    Obj.repr(
# 80 "a3.mly"
                    (_1)
# 504 "a3.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expression) in
    Obj.repr(
# 84 "a3.mly"
                                           ( Project((_3,_5),_7))
# 513 "a3.ml"
               : 'proj_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_expression) in
    Obj.repr(
# 85 "a3.mly"
                    (_1)
# 520 "a3.ml"
               : 'proj_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuple_list) in
    Obj.repr(
# 88 "a3.mly"
                   ( Tuple( List.length (_2), _2) )
# 527 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_expression) in
    Obj.repr(
# 89 "a3.mly"
                     ( _1)
# 534 "a3.ml"
               : 'tuple_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 92 "a3.mly"
                                    ( ((_1)::[(_3)]) )
# 542 "a3.ml"
               : 'tuple_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_list) in
    Obj.repr(
# 93 "a3.mly"
                                    ( (_1)::(_3))
# 550 "a3.ml"
               : 'tuple_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'or_expression) in
    Obj.repr(
# 97 "a3.mly"
                      ( InParen(_2))
# 557 "a3.ml"
               : 'paren_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 98 "a3.mly"
             (_1)
# 564 "a3.ml"
               : 'paren_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "a3.mly"
   (Var(_1))
# 571 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 102 "a3.mly"
      (N(_1))
# 578 "a3.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 103 "a3.mly"
       (B(_1))
# 585 "a3.ml"
               : 'constant))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.exptree)
